@startuml

package "moteur"{
  Interface Jeu{
    + init(): void
    + etreFini(): boolean
    + ajouterObservateur(DessinJeu): void
    - notifierObservateurs(): void
  }
  class Clavier{
    - simulation : Simulation
    + handle(KeyEvent): void
  }
  class ClavierNonInteractif{
    - simulation : Simulation
    + handle(KeyEvent): void
  }
  class MoteurJeu{
    + start(Stage): void
  }
}
package "musique" {
    class SoundManager{
     - {static} fondMusic : MediaPlayer
     - {static} winMusic :MediaPlayer
     - {static} looseMusic MediaPlayer
     - {static} drawMusic : MediaPlayer
     - {static} gameMusic : MediaPlayer
     + SoundManager()
     + {static} playFondMusic() : void
     + {static} playGameMusic() : void
     + {static} playWinMusic() : void
     + {static} playLooseMusic : void
     + {static} playDrawMusic : void
     + {static} stopFondMusic() : void
     + {static} stopAllMusic() : void
    }
}
package "affichage" {
  Interface DessinJeu{
    + update(Jeu): void
  }
  class FiltreVision{
    + {static} initFiltre(int, int, int, Joueur,boolean): Rectangle[][]
    + {static} updateFiltre(Rectangle[][], Joueur,boolean): void
  }
  class FiltreCamera{
      + {static} initFiltre(int, int, int): Rectangle[][]
    }
  class VueSimulation{
    # imageMur: Image
    # imageSol : Image
    # imageSortie : Image
    # imagePrisonnier : Image
    # imageGardien : Image
    # prisonnierView : ImageView
    # gardienView : ImageView
    # TAILLE_CELLULE : int
    - labyrinthePane : Pane
    # simulation : Simulation
    # avec_camera : boolean
    + VueSimulation()
    # initLabyrinthe(boolean): void
    # {abstract} setOpacityPersonnage(): void
    # {abstract} updatePositions(): void
    + {static} updateDirectionPersonnage(int, List<Deplacement>, String, ImageView): void
    # setPositions(Position, ImageView): void
    + setAvec_Camera (boolean ): void
  }
  class FiltreBayesien{
    + {static} initFiltre(double[][], int): Rectangle[][]
    + {static} updateBayes(Rectangle[][], double[][])
  }

  class VuePrincipale{
    - iterationLabel: Label
    - filtreVision: Rectangle[][]
    - tour: int
    - caseBayesienneHisto : Rectangle[][]
    # DECALAGE : int
    + VuePrincipale(double, double)
    - init(): void
    # setOpacityPersonnage(): void
    # updatePositions: void
    + update(Jeu): void
    + updateIteration(): void
    + initFiltreVision(): void
    + setFiltreVision(): void
    + historique(): void
    + updateHistorique(): void
  }

  class VueBayesienne{
      - perso : Personnage
      - persoView: ImageView
      - imagePerso: Image
      - caseBayesienne: Rectangle[][]
      - tour: int
      - decalageX : int
      - decalageY : int
      + VueBayesienne(Simulation, Personnage, int, int, int)
      - init(): void
      + setOpacityPersonnage(): void
      # updatePositions(): void
      - updateBayes(): void
      + update(int): void
      # updateDirections(int): void
  }
  class VuePrincipaleNonInteractive{
    - iterationLabel : Label
    - tour : int
    + VuePrincipaleNonInteractive(double, double)
    - init(): void
    # setOpacityPersonnage(): void
    # updatePositions(): void
    + update(Jeu): void
    + createBayesienneView(Personnage, String, VueBayesienne): VBox
    + updateIteration(): void
    + setPositions(Position, ImageView): void
  }
  class PageAccueil{
     - {static} WIDTH : double
     - {static} HEIGHT : double
     + {static} lancerPageAcceuil(MoteurJeu jeu, Stage primaryStage) : void
     + {static} void afficherTuto(Jeu j, Scene scene, Pane root):void
    }
  class VueMenus{
    - {static} WIDTH : double
    - {static} HEIGHT : double
    - {static} jeu : MoteurJeu
    # primaryStage: Stage
    - choixPersonnage : String
    + VueMenus(MoteurJeu)
    + VueMenus()
    - initPrimayStage(): void
    - setScene(Scene, String): void
    + afficherMenuPrincipal(): void
    + afficherMenuPersonnage(): void
    + afficherJeu(Jeu, Pane, Scene): void
    + afficherMenuIA(): void
    + afficherMenuSauvegarde(Stage, VBox, Scene): void
    + getChoixPersonnage(): String
    + setChoixPersonnage(String): void
  }
  class VueMenusNonInteractive{
    - {static} WIDTH : double
    - {static} HEIGHT : double
    + VuePrincipaleNonInteractive(MoteurJeu)
    + afficherMenuIA(Stage): void
  }
  class VueSauvegarde{
    - iterationLabel : Label
    - tour : int
    - filtreVision : Rectangle[][]
    - viewInteractifPerso : ImageView
    - viewInteractifAdversaire :ImageView
    - interactive :boolean
    + VueSauvegarde(double, double, Simulation)
    + init() : void
    - createBayesienneView(Personnage, String, VueBayesienne): VBox
    - creerVision(String) : VBox
    - creerLabyvision(): Pane
    # setOpacityPersonnage(): void
    # updatePositions(): void
    + update(): void
    + updateIteration(): void
    + setPositions(Position, ImageView): void
    + initFiltreVision(Pane): void
    + updateFiltreVision(): void
  }
}

MoteurJeu --|> Application
MoteurJeu "1" --> "1" Jeu: jeu


DessinJeu <|.. VuePrincipale
VuePrincipale --|> VueSimulation
VueBayesienne --|> VueSimulation
VuePrincipaleNonInteractive --|> VueSimulation
VuePrincipaleNonInteractive ..|> DessinJeu
VueMenus "1" --> "1" MoteurJeu : jeu
VueMenusNonInteractive "1" --> "1" MoteurJeu : jeu
VuePrincipaleNonInteractive "1" --> "1" VueBayesienne: vB1
VuePrincipaleNonInteractive "1" --> "1" VueBayesienne: vB2
VueSauvegarde --|> VueSimulation
VueSauvegarde "1" --> "1" VueBayesienne: vB1
VueSauvegarde "1" --> "1" VueBayesienne: vB2

@enduml