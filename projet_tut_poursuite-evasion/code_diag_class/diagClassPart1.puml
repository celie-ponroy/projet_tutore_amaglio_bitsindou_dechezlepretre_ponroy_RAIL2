@startuml

package "moteur"{
  interface Jeu{
    + etreFini(): boolean
    + ajouterObservateur(DessinJeu): void
    + notifierObservateurs(): void
  }
  class Clavier{
    - simulation: Simulation
    + Clavier(Simulation)
    + handle(KeyEvent): void
  }
  class ClavierNonInteractif{
    - simulation: Simulation
    + ClavierNonInteractif(Simulation)
    + handle(KeyEvent): void
  }
  class ClavierTuto{
  - simulation: Simulation
  + ClavierTuto(Simulation)
  + handle(KeyEvent): void
    }
  class MoteurJeu{
    + start(Stage): void
  }
}

package "musique" {
    class SoundManager{
     - {static} fondMusic : MediaPlayer
     - {static} winMusic :MediaPlayer
     - {static} looseMusic MediaPlayer
     - {static} drawMusic : MediaPlayer
     - {static} gameMusic : MediaPlayer
     - {static} btnMusic: MediaPlayer
     + SoundManager()
     - createMediaPlayer(String): MediaPlayer
     + {static} playFondMusic() : void
     + {static} playGameMusic() : void
     + {static} playWinMusic() : void
     + {static} playLooseMusic : void
     + {static} playDrawMusic : void
     + {static} stopFondMusic() : void
     + {static} stopAllMusic() : void
    }
}
package "affichage" {
  interface DessinJeu{
    + update(Jeu): void
  }
  package "filtres"{
      class FiltreVision{
          + {static} camera : Color
          + {static} nuit : Color
        + {static} initFiltre(int, int, int, Joueur,boolean): Rectangle[][]
        + {static} updateFiltre(Rectangle[][], Joueur,boolean): void
      }
      class FiltreCamera{
          + {static} camera : Color
          + {static} initFiltre(int, int, int): Rectangle[][]
        }
    class FiltreBayesien{
        + {static} initFiltre(double[][], int, int, int): Rectangle[][]
        + {static} updateBayes(Rectangle[][], double[][])
      }
  }
  class VueSimulation{
    # imageMur: Image
    # imageSol : Image
    # imageSortie : Image
    # imagePrisonnier : Image
    # imageGardien : Image
    # prisonnierView : ImageView
    # gardienView : ImageView
    # TAILLE_CELLULE : int
    - labyrinthePane : Pane
    # simulation : Simulation
    # avec_camera : boolean
    + VueSimulation()
    # initLabyrinthe(boolean): Pane
    # {abstract} setOpacityPersonnage(): void
    # {abstract} updatePositions(): void
    # updateDirections(int): void
    + {static} updateDirectionPersonnage(int, List<Deplacement>, String, ImageView): void
    # setPositions(Position, ImageView): void
    + setAvec_Camera (boolean ): void
    # lancerSauvegarde(Button): void
  }


  class VuePrincipale{
    - iterationLabel: Label
    - filtreVision: Rectangle[][]
    - tour: int
    - caseBayesienneHisto : Rectangle[][]
    # DECALAGE : int
    + VuePrincipale(double, double)
    - init(): void
    + update(Jeu): void
    + updateIteration(): void
    + initFiltreVision(): void
    + setFiltreVision(): void
    + historique(): void
    + updateHistorique(): void
  }

  class VueBayesienne{
      - perso: Personnage
      - persoView: ImageView
      - imagePerso: Image
      - caseBayesienne: Rectangle[][]
      - tour: int
      - decalageX : int
      - decalageY : int
      - casesCameras: Rectangle[][]
      + VueBayesienne(Simulation, Personnage, int, int, int)
      - init(): void
      # updatePositions(): void
      - updateBayes(): void
      # updateDirections(int): void
  }
  class VuePrincipaleNonInteractive{
    - iterationLabel : Label
    - tour : int
    - casesCameras: Rectangle[][]
    + VuePrincipaleNonInteractive(double, double)
    - init(): void
    + createBayesienneView(String, VueBayesienne): VBox
    + updateIteration(): void
  }

  class VueAnalyse{
    - camembert: PieChart
    - courbes: LineChart<String, Number>
    - lancerAnalyse: LancerAnalyse
    - nbIterationsInt: int
    - caseFiltreChaleur: Rectangle[][]
    - radioBtnPrisonnier: RadioButton
    - radioBtnGardien: RadioButton
    - radioBtnTous: RadioButton
    + vueAnalyse()
    + createAnalyseView(Stage): VBox
    + initTopContainer(VBox, HBox, Button): VBox
    + choixComboBox(ComboBox<String>,ComboBox<String>): Comportements[]
    + afficherCamembert(): void
    + graphiqueCourbes(): LineChart<String, Number>
    + initFiltreChaleur(): Rectangle[][]
    + normaliser(int, HashMap<Position, Integer>): double
    + updateFiltreChaleur(HashMap<Position, Integer>): void


  }
  class PageAccueil{
     - {static} WIDTH : double
     - {static} HEIGHT : double
     # {static} isMuted: boolean
     + {static} lancerPageAcceuil(MoteurJeu jeu, Stage primaryStage) : void
     - {static} ajoutBoutons(MoteurJeu, Stage, Pane): VBox
     - {static} creerBoutonSon(): Button
     + {static} void afficherTuto(Jeu , Scene , Pane):void
    }
  class VueMenus{
    - {static} WIDTH : double
    - {static} HEIGHT : double
    - {static} jeu : MoteurJeu
    # primaryStage: Stage
    - choixPersonnage : String
    + VueMenus(MoteurJeu, Stage)
    + VueMenus(Stage)
    - setScene(Parent, String): void
    + afficherMenuPrincipal(): void
    + afficherMenuPersonnage(): void
    + afficherJeu(Jeu, Pane): void
    + afficherMenuIA(): void
    + afficherMenuSauvegarde(Stage, VBox): void
    + afficherAnalyse(): void
    + getChoixPersonnage(): String
    + setChoixPersonnage(String): void
    + retourBtn(): Button
    + afficherTuto(Jeu, Scene, Pane)
    + chargementBouton(Button): String
  }
  class VueMenusNonInteractive{
    - {static} jeu : MoteurJeu
    + VuePrincipaleNonInteractive(MoteurJeu)
    + afficherMenuIA(Stage): void
    + chargementBouton(Button): String
  }
  class VueSauvegarde{
    - iterationLabel : Label
    - tour : int
    - filtreVision : Rectangle[][]
    - viewInteractifPerso : ImageView
    - viewInteractifAdversaire :ImageView
    - interactive :boolean
    + VueSauvegarde(double, double, Simulation)
    + init() : void
    - createBayesienneView(String, VueBayesienne): VBox
    - creerVision(String) : VBox
    - creerLabyvision(): Pane
    + update(): void
    + updateIteration(): void
    + initFiltreVision(Pane): void
    + updateFiltreVision(): void
  }
  class InformationsIa{
    + {static, final} WIDTH : int
    + {static, final} HEIGHT : int
    + {static} VBox getInfosPrisonnier()
    + {static} VBox getInfosGardien()
    + {static} void popUpPrisonnier()
    + {static} void popUpGardien()
    + {static} void popUpNonInteractif()
    - {static} void toggleLabel(String, String, VBox)
    - {static} void toggleLabel(Text)
    + {static} Button getButtonInfo()

  }

  class VueTutoriel{
    - CENTRE : int
    - instructions : VBox
    - filtreVision : Rectangle[][]
    - WIDTH :int
    - HEIGHT: int
    + VueTutoriel(SimulationTutoriel, double,double)
    - init() : void
    - updateInfos(): void
    - setInfoDebutPerso(): void
    - setInfoDeplacement(): void
    - ajouterTouche(GridPane, String, String, int, int): void
    - setInfoGradien(): void
    - setInfosFin(): void
    - clearInfos():void
    + updateFiltreVision():void
    + filtreGardien(): void
    + filtrePrisonnier(): void

  }

  class Credits{
    + start(Stage, MoteurJeu) : void
    - creerTache(VBox, String, String[]): void
  }

  class FabriqueComportment{
    + {static} creerComboBoxPrisonnier():ComboBox<String>
    + {static} creerComboBoxGardien():ComboBox<String>
    + {static} creerSimulation(String):Simulation
    + {static} creerComportement(String):Comportements
  }

}

MoteurJeu --|> Application
MoteurJeu "1" --> "1" Jeu: jeu


DessinJeu <|.. VuePrincipale
VuePrincipale --|> VueSimulation
VueBayesienne --|> VueSimulation
VuePrincipaleNonInteractive --|> VueSimulation
VuePrincipaleNonInteractive ..|> DessinJeu
VueMenus "1" --> "1" MoteurJeu : jeu
VueMenusNonInteractive "1" --> "1" MoteurJeu : jeu
VuePrincipaleNonInteractive "1" --> "1" VueBayesienne: vB1
VuePrincipaleNonInteractive "1" --> "1" VueBayesienne: vB2
VueSauvegarde --|> VueSimulation
VueSauvegarde "1" --> "1" VueBayesienne: vB1
VueSauvegarde "1" --> "1" VueBayesienne: vB2
VueAnalyse --|> VueSimulation
VueAnalyse ..|> DessinJeu
VueTutoriel --|> VueSimulation
VueTutoriel ..|> DessinJeu



@enduml