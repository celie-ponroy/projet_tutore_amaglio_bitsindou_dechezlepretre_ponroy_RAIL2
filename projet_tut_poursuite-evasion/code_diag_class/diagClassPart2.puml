@startuml

package "simulation"{
  enum Deplacement{
    HAUT
    BAS
    GAUCHE
    DROITE
    DIAG_HAUT_GAUCHE
    DIAG_HAUT_DROITE
    DIAG_BAS_GAUCHE
    DIAG_BAS_DROITE
    AUCUN
  }
  enum Comportements{
    ArbreDeterministePris
    ArbreDeterministeGard
    ArbreDeterministev2
    AleatoirePris
    AleatoireGard
    ArbreAleatoire
    ReseauArbreCNN
    ReseauRenforcement
    ReseauArbreMLP
    ReseauArbreAleatoire
  }
  enum CaseEnum{
    MUR
    SOL
    SORTIE
    SPAWN_PRISONNIER
    SPAWN_GARDIEN
    RACCOURCI_GARDIEN
    CAMERA
  }


  package "comportement"{
    class ReseauDeNeurones{
        - model : Model
        - block : SequencialBlock
        - translator: Translator<NDArray, Integer>
        + ReseauDeNeurones(String, Simulation, Personnage)
        + {static} setBlock():void
        + {static} getBlock():SequencialBlock
    }
    class ReseauDeNeuronesCNN{
            - model : Model
            - block : SequencialBlock
            - translator: Translator<NDArray, Integer>
            + ReseauDeNeuronesCNN(String, Simulation, Personnage)
            + {static} setBlock():void
            + {static} setBlock():SequencialBlock
        }
    interface Comportement{
        + prendreDecision(): Deplacement
        + getType(): Comportements
    }
    class Aleatoire{
        + Aleatoire(Simulation,Personnage)
        - deplacementAleatoire(): Deplacement
    }
    class ArbreDecision{
        + direction(Position, Position): Deplacement
        + oppose(Deplacement): Deplacement
    }
    class ArbreDecisionGardien{
      + ArbreDecisionGardien(Simulation, Personnage)
    }
    class ArbreDecisionGardienAleatoire{
        + ArbreDecisionGardienAleatoire(Simulation, Personnage)
        - choixDeplacementAleatoire(double[][]): int[]
    }
    class ArbreDecisionPrisonnier{
          + ArbreDecisionPrisonnier(Simulation, Personnage)
    }
    class ArbreDecisionPrisonnier2{
          + ArbreDecisionPrisonnier(Simulation, Personnage)
          - fuir(Position): Deplacement
    }
  }
  class Simulation{
    # observateurs : List<DessinJeu>
    # nbTours : int
    # nbDeplacementsPerso : int
    # victoirePrisonnier : boolean
    # victoireGardien : boolean
    + {static} CARTE : int[][]
    + {static} final VISION_G : HashMap<Position, ArrayList<Position>>
    + {static} final VISION_P : HashMap<Position, ArrayList<Position>>
    + {static} final VISION_CAMERAS : HashMap<Position, ArrayList<Position>>
    + {static} final CHEMIN_G : HashMap<List<Position>, Stack>
    + {static} final CHEMIN_P : HashMap<List<Position>, Stack>
    # historiquePosition : HashMap<Personnage, List<Position>>
    # historiqueBayesien : HashMap<Personnage, List<double[][]>>
    # historiqueDeplacement : HashMap<Personnage, List<Deplacement>>
    # estFini : boolean
    # carteBayesiennes : HashMap<Personnage, double[][]>
    # bayesiens : HashMap<Personnage, Bayesien>
    + Simulation(Comportements, Comportements)
    + Simulation(boolean, Comportements)
    + Simulation(Simulation)
    # positionnerAgentsSpawnAleatoire(): void
    # positionnerAleatoirement(): void
    + deplacerAgents(): void
    + deplacementJoueur(Deplacement): void
    + miseAJourFinJeu(): void
    + actualisationBayesienne(Personnage, Personnage): void
    + {static} murPresent(int, int): boolean
    + deplacerPersonnage(Personnage, Deplacement): boolean
    + verifierDeplacement(Personnage, Deplacement): boolean
    + setComportementsGardien(Comportements): void
    + setComportementsPrisonnier(Comportements): void
    + estVisible(Personnage, boolean): boolean
  }

  class Case{
    - x: int
    - y: int
    + Case (int ,int)
    + getX ():int
    + getY ():int
  }

  package "personnage"{
    class Bayesien{
      - carteBayesienne: double[][]
      - casesValides : List<Case>
      + Bayesien()
      + calculerProbaPresence(double[][], List<Integer[]>): double[][]
      + getCasesVoisineValide(int, int): List<Case>
      + getPlusGrandeProbas(): List<Case>
      + getCarteBayesienne(): double[][]
    }
    class Position{
     - x: int
     - y: int
     + Position(int, int)
     + setX(int): void
     + setY(int): void
     + getX(): int
     + getY(): int
     + deplacement(Deplacement):void
     + casesAdjacentes(): ArrayList<Position>
    }

    class Personnage{
      # vision : HashMap<Position,ArrayList<Position>>
      + Personnage(int, int)
      + {abstract} deplacer(Position): void
      + getPosition(): Position
      + setPosition(Position): void
      + getVision(): ArrayList<Position>
    }
    class Agent{
      + Agent(int, int, HashMap<Position,ArrayList<Position>>)
    }
    class Joueur{
      + Joueur(int, int)
    }
  }
  package "tuto"{
    enum EtatTuto {
        DEBUT_Perso
        DEPLACEMENT
        GARDIEN
        DEPLACEMENT_GARDIEN
        FIN
    }
    class SimulationTutoriel{
        - gardienVue: boolean
        + SimulationTutoriel()
        + deplacementJoueur(Deplacement): void
        + update(KeyEvent): void
        - getDeplacement(KeyEvent): Deplacement
    }

  }
}


ReseauDeNeurones "1" --> "1" Simulation : simulation
ReseauDeNeurones "1" --> "1" Personnage : personnage
ReseauDeNeurones ..|> Comportement

ReseauDeNeuronesCNN "1" --> "1" Simulation : simulation
ReseauDeNeuronesCNN "1" --> "1" Personnage : personnage
ReseauDeNeuronesCNN ..|> Comportement

Aleatoire "1" --> "1" Simulation : simulation
Aleatoire "1" --> "1" Personnage : perso
Aleatoire ..|> Comportement

ArbreDecisionGardien --|> ArbreDecision
ArbreDecisionGardien ..|> Comportement
ArbreDecisionGardien "1" --> "1" Simulation: simulation
ArbreDecisionGardien "1" --> "1" Personnage: personnage

ArbreDecisionPrisonnier --|> ArbreDecision
ArbreDecisionPrisonnier ..|> Comportement
ArbreDecisionPrisonnier "1" --> "1" Simulation: simulation
ArbreDecisionPrisonnier "1" --> "1" Personnage: personnage

ArbreDecisionGardienAleatoire ..|> Comportement
ArbreDecisionGardienAleatoire --|> ArbreDecision
ArbreDecisionGardienAleatoire "1" --> "1" Simulation: simulation
ArbreDecisionGardienAleatoire "1" --> "1" Personnage: personnage


ArbreDecisionPrisonnier2 --|> ArbreDecision
ArbreDecisionPrisonnier2 ..|> Comportement
ArbreDecisionPrisonnier2 "1" --> "1" Simulation: simulation
ArbreDecisionPrisonnier2 "1" --> "1" Personnage: personnage




Bayesien "1" --> "*" Case: casesValides
Agent --|> Personnage
Joueur --|> Personnage
Personnage "1" --> "1" Position : position

SimulationTutoriel --|> Simulation
SimulationTutoriel"1" --> "1" EtatTuto: etatActuel

Simulation "1" --> "1" Personnage: gardien
Simulation "1" --> "1" Personnage: prisonnier
Simulation "1" --> "1" Comportement: comportementGardien
Simulation "1" --> "1" Comportement: comportementPrisonnier

@enduml
