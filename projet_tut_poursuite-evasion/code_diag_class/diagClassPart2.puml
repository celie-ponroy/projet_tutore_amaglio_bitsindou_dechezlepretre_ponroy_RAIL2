@startuml

package "simulation"{
  enum Deplacement{
    HAUT
    BAS
    GAUCHE
    DROITE
    DIAG_HAUT_GAUCHE
    DIAG_HAUT_DROITE
    DIAG_BAS_GAUCHE
    DIAG_BAS_DROITE
    AUCUN
  }
  enum Comportements{
    ARBREDETERMINISTE
    ARBREDETERMINISTEV
    ALEATOIRE
    ARBREALEATOIRE
    RESEAUARBREDETERMINISTE
    RESEAUARBREALEATOIRE
  }
  enum CaseEnum{
    MUR
    SOL
    SORTIE
    SPAWN_PRISONNIER
    SPAWN_GARDIEN
  }

  package "apprentissage"{
    class ApprentissageDeArbre{
        + main(): void
    }
  }
  package "comportement"{
    class ReseauDeNeurones{
        + ReseauDeNeurones(String, Simulation, Personnage)
        - neuralNetwork : NeuralNetwork
    }
    Interface Comportement{
        + prendreDecision(): Deplacement
    }
    class Aleatoire{
        - deplacementAleatoire(): Deplacement
    }
    class ArbreDecision{
        + direction(Position, Position): Deplacement
    }
    class ArbreDecisionGardien{
      + ArbreDecisionGardien(Simulation, Personnage)
    }
    class ArbreDecisionGardienAleatoire{
        + ArbreDecisionGardienAleatoire(Simulation, Personnage)
        - choixDeplacementAleatoire(double[][]): int[]
    }
    class ArbreDecisionPrisonnier{
          + ArbreDecisionPrisonnier(Simulation, Personnage)
          + oppose(Deplacement): Deplacement
    }
    class ArbreDecisionPrisonnier2{
          + ArbreDecisionPrisonnier(Simulation, Personnage)
          + fuir(): Deplacement
    }
  }
  class Simulation{
    - nbTours : int
    - estFini : boolean
    - victoirePrisonnier : boolean
    - victoireGardien : boolean
    - observateurs : ArrayList<DessinJeu>
    - carteBayesiennes : HashMap<Personnage, double[][]>
    - bayesiens : HashMap<Personnage, Bayesien>
    + {static} final CARTE : int[][]
    + {static} final VISION : HashMap<Position, ArrayList<Position>>
    + {static} final CHEMIN_G : HashMap<List<Position>, Stack>
    + {static} final CHEMIN_Py : HashMap<List<Position>, Stack>
    + historiquePosition : HashMap<Personnage, List<Position>>
    + historiqueBayesien : HashMap<Personnage, List<double[][]>>
    + historiqueDeplacement : HashMap<Personnage, List<Deplacement>>
    + Simulation(boolean, Comportements)
    + Simulation(Comportement, Comportement)
    + positionnerAgentsSpawnAleatoire(): void
    + positionnerAleatoirement(): void
    + deplacerAgents(): void
    + deplacerPersonnage(Personnage, Deplacement): boolean
    + deplacementJoueur(Deplacement): void
    + verifierDeplacement(Personnage, Personnage): boolean
    + miseAJourFinJeu(): void
    + actualisationBayesienne(Personnage, Personnage): void
    + estVisible(Personnage, boolean): boolean
    + murPresent(int, int): boolean
    + getPrisonnier(): Personnage
    + getGardien(): Personnage
    + getJoueur(): Personnage
    + getPosSortie(): Position
    + getCarteBayesienne(Personnage): double[][]
    + getBayesiens(): HashMap<Personnage, Bayesien>
    + getVictoirePrisonnier(): boolean
    + getVictoireGardien(): boolean
  }

  class Case{
    - x: int
    - y: int
    - contenu: int
  }

  package "personnage"{
    class Bayesien{
      - carteBayesienne: double[][]
      - casesValides : List<Case>
      + Bayesien()
      + calculerProbaPresence(double[][], List<Integer[]>): double[][]
      + getCasesVoisineValide(int, int): List<Case>
      + getPlusGrandeProbas(): List<Case>
      + getCarteBayesienne(): double[][]
    }
    class Position{
     - x: int
     - y: int
     + Position(int, int)
     + setX(int): void
     + setY(int): void
     + getX(): int
     + getY(): int
     + deplacer(int, int): void
     + deplacer(Deplacement): void
     + casesAdjacentes(): ArrayList<Position>
    }

    class Personnage{
      + Personnage(int, int)
      + {abstract} deplacer(Position): void
      + getPosition(): Position
      + setPosition(Position): void
      + getVision(): ArrayList<Position>
    }
    class Agent{
      + Agent(int, int)

    }
    class Joueur{
      + Joueur(int, int)
    }
  }
}


ReseauDeNeurones "1" --> "1" Simulation : simulation
ReseauDeNeurones "1" --> "1" Personnage : personnage
ReseauDeNeurones ..|> Comportement
Aleatoire "1" --> "1" Simulation : simulation
Aleatoire "1" --> "1" Personnage : perso
Aleatoire ..|> Comportement
ArbreDecisionPrisonnier --|> ArbreDecision
ArbreDecisionGardien --|> ArbreDecision
ArbreDecisionPrisonnier ..|> Comportement
ArbreDecisionGardien ..|> Comportement
ArbreDecisionPrisonnier "1" --> "1" Simulation: simulation
ArbreDecisionPrisonnier "1" --> "1" Personnage: personnage
ArbreDecisionGardien "1" --> "1" Simulation: simulation
ArbreDecisionGardien "1" --> "1" Personnage: personnage
ArbreDecisionGardienAleatoire "1" --> "1" Simulation: simulation
ArbreDecisionGardienAleatoire "1" --> "1" Personnage: personnage
ArbreDecisionGardienAleatoire ..|> Comportement
ArbreDecisionGardienAleatoire --|> ArbreDecision
ArbreDecisionPrisonnier2 "1" --> "1" Simulation: simulation
ArbreDecisionPrisonnier2 "1" --> "1" Personnage: personnage
ArbreDecisionPrisonnier2 --|> ArbreDecision
ArbreDecisionPrisonnier2 ..|> Comportement



Bayesien "1" --> "*" Case: casesValides
Agent --|> Personnage
Joueur --|> Personnage
Personnage "1" --> "1" Position : position

Simulation "1" --> "1" Personnage: gardien
Simulation "1" --> "1" Personnage: prisonnier
Simulation "1" --> "1" Comportement: comportementGardien
Simulation "1" --> "1" Comportement: comportementPrisonnier


@enduml
