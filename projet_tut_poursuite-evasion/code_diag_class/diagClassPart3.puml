@startuml

package "lancercalculs"{
  class LancerCalculs{
    + {static} main(String[]): void
    + {static} laby : String
    + {static} init(): void
    + {static} initSansDS(): void

  }
  class LancerAnalyse{
    - etreFini: boolean
    _ observateurs: List<DessinJeu>
    - nbVictoireGardien: int
    - nbVictoirePrisonnier: int
    - matchNull: int
    - nbIterationCourante: int
    - nbDeplacementPerso: int
    - historiqueDeplacementPerso: List<Integer>
    - casesVisitees: HashMap
    - casesVisiteesPrisonnier: HashMap
    - casesVisiteesGardien: HashMap
    - nbIterationTotal: int
    - pause: boolean
    - casesDepartPris: HashMap<Position, Integer>
    - casesDepartGard: HashMap<Position, Integer>
    + LancerAnalyse()
    + lancerAnalyse(int, Comportements, Comportements): void
    + etreFini(): boolean
    - updateCasesVisiteesPrisonnier(List<Position>): void
    - updateCasesVisiteesGardien(List<Position>): void
    + reinitialiser(): void
    + {synchronized} isPause(): boolean
  }
  class LancerCalculsChemins{
    + {static} main(String[]): void
  }
  class LancerCalculsVision{
    + {static} main(String[]): void
  }
  class LancerCalculsDatasetArbreCNN{
         + {static} launch(): void
  }
   class LancerCalculsDatasetArbreMLP{
         + {static} launch(): void
   }
   class LancerCalculsDatasetQLearning{
         + {static} launch(ReseauDeNeuronesQLearning): void
   }
}
package "outils"{
    class ChargementCarte{
        + {static} charger(String): int[][]
    }
    class Outil{
      + {static} applatissement(double[][]): double[]
      + conversionIntFloat(int[][]):float[][]
      + conversionDoubleFloat(double[][]):float[][]
      + conversionDoubleFloat(double[]):float[]
      + {static} afficher_tab(double[]): void
      + {static} afficher_doubleTab(int[][]): void
      + {static} doubleToFloat(double[]): float[]
      + {static} concatener_tab(double[],double[] ): double[]
    }
    class DataCollector{
        + {static} saveDataMLP(double[], double, double, int): void
        + {static} saveDataCNN(double[], double, double, double[], double, String): void
        + {static} etiquettage(String, String): void
    }
    interface CSVDataset{

    }
    class CSVDatasetCNN{
        - {final} csvRecords: List<CSVRecord>
        + CSVDatasetCNN(Builder)
        + get(NDManager, long): Record
        + availableSize(): long
        + parseMap(String): float[]
        + prepare(Progress): void
        + {static} builder(): Builder
    }
    class CSVDatasetMLP{
            - {final} csvRecords: List<CSVRecord>
            + CSVDatasetMLP(Builder)
            + get(NDManager, long): Record
            + availableSize(): long
            + parseMap(String): float[]
            + prepare(Progress): void
            + {static} builder(): Builder
    }
}
CSVDatasetCNN ..|> CSVDataset
CSVDatasetMLP ..|> CSVDataset


@enduml