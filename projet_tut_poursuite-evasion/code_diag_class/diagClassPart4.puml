@startuml
package "calculs"{
  class CalculVision{
    + {static} carte : int[][]
    + {static} recupererVision(String): HashMap<Position,ArrayList<Position>>
    + {static} ecrireVision(): void
    + {static} ecrireFichierVision(HashMap, String) : void
    + {static} calculerCarteVision(): HashMap
    + {static} ajoutCamera(HashMap<Position,ArrayList<Position>>, int,int,int) : ArrayList<Position>
    + {static} calculerVision(int, int,int): ArrayList
    - {static} cleanVision(HashMap<Position, ArrayList<Position>>): void
    - {static} cleanVisionCase (ArrayList<Position>, Position):void
    - {static} parcours(Position, Position, ArrayList<Position>, ArrayList<Position>): boolean
  }
  class CalculChemins {
    + {static} carte : int[][]
    + {static} recupererCheminPrisonnier(): HashMap<List<Position>,Stack>
    + {static} recupererCheminGardien(): HashMap<List<Position>,Stack>
    - {static} lirefichier(String): HashMap<List<Position>,Stack>
    + {static} ecrireChemins(String): void
    - {static} ecrireFichier(String, Boolean, String): void
    + {static} calculerChemins(Boolean, String): HashMap<List<Position>,Stack>
    + {static} isValid(int, int, Position): boolean
    + {static} isUnblocked(int[][], int, int, Position): boolean
    + {static} isDestination(Position, Position): boolean
    + {static} calculateHValue(Position, Position): double
    + {static} tracePath(Cell[][], Position): Stack
    + {static} aStarSearch(int[][], int, int, Position, Position): Stack
  }
}

package sauvegarde{
    class Sauvegarde{
    + {static} main(String[]): void
    + {static} sauvegarder(Simulation, String): void
    + {static} charger(String): Simulation
    + {static} nomsSauvegardes(): ArrayList<String>
    }
    class SimulationSerializable{
        - nbTours: int
        - gardien: Personnage
        - prisonnier: Personnage
        - victoirePrisonnier: boolean
        - victoireGardien: boolean
        - comportementGardien: Comportements
        - comportementPrisonnier: Comportements
        - historiquePosition : HashMap<Personnage, List<Position>>
        - historiqueBayesien : HashMap<Personnage, List<double[][]>>
        - historiqueDeplacement : HashMap<Personnage, List<Deplacement>>
        - estFini : boolean
        - carteBayesiennes : HashMap<Personnage, double[][]>
        - bayesiens : HashMap<Personnage, Bayesien>
        + SimulationSerializable(Simulation)
        + creerSimulation(): Simulation
    }
}
package "apprentissage"{
    class ApprentissageArbre{
        + main(String[]): void
        + afficherRecord(CSVDatasetCNN):void
    }
    class ApprentissageQLearning{
            + main(String[]): void
    }
    class OptimisationBayesienne{
        - {static} final MIN_NEURONS: int
        - {static} final MAX_NEURONS: int
        - {static} final MIN_LAYERS: int
        - {static} final MAX_LAYERS: int
        - {static} final INITIAL_SAMPLES: int
        - {static} final ITERATIONS: int
        + {static} lossMini: float
        + {static} BETA: float
        - {static} testedConfigs: List<int[]>
        - {static} lossResults: List<Double>
        - {static} random: Random
        + main(String[]): void
        - {static} getRandomConfig(): int[]
        - {static} suggestNextConfiguration(): int[]
        - {static} getRandomNearConfig(): int[]
        - {static} predictMean(int[]): double
        - {static} predictVariance(int[]): double
        - {static} euclideanDistance(int[], int[]): double
        - {static} evaluate(int[]): double
    }
  }

@enduml